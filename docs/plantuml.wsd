@startuml name
class Player {
  -name: string
  
  __static methods__
  +prompt_for_player_name(): string
  +player_placing_ships(fleet_player: dict, board_player: object)
}

note right of Player::prompt_for_player_name
  Static method to prompt the user for their name.
  This method does not require access to the instance (self)
  or the class (cls).
  
  Returns:
      str: The name entered by the user.
end note

note right of Player::player_placing_ships
  Asks the player where to place their ships. Repeats for invalid placements.
end note

class Grid {
  -size: int
  -grid: list
  -coordinates_x: dict
  -coordinates_y: dict

  +__init__(size: int)
  +initialize_grid(size: int): list
  +_convert_coordinate_to_indices(coordinate: str): (int, int)
  +_convert_indices_to_coordinate(column_index: int, row_index: int): str
  +update_grid_fleet(start_coordinate: str, direction: str, fleet: dict, size: int, shipname: str): bool
  +update_grid_attacks(coordinate: str)
  +print_grid()
}

note left of Grid
  A class for representing a grid in grid-based games 
  like Battleship. It includes methods for initializing the grid,
  updating with ship placements or attack results, and converting 
  between coordinate systems. Further implementation is 
  required to fully handle game logic.
end note

note right of Grid::update_grid_fleet
  Updates the grid with the placement of a ship based on the start coordinate, direction, and size. 
  Checks for valid placement and updates the fleet's coordinates accordingly.
end note

note right of Grid::update_grid_attacks
  Updates the grid to reflect the result of an attack at the given coordinate. 
  Marks hits or misses on the grid.
end note

note right of Grid::print_grid
  Prints the current state of the grid, showing ships, hits, misses, and empty spaces.
end note

@enduml